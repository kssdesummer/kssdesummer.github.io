I"C<h1 id="css3弹性盒子">CSS3弹性盒子</h1>

<h2 id="css3-弹性盒子flex-box">CSS3 弹性盒子(Flex Box)</h2>

<p>​	弹性盒子是一种布局模式,当页面需要适应不同的屏幕大小以及设备类型时确保元素拥有恰当的行为的布局方式,目的是为了提供一种更加有效的方式对一个容器中的子元素进行排列/对齐和分配空白空间</p>

<h3 id="弹性盒子内容">弹性盒子内容</h3>

<p>​	弹性盒子由弹性容器(Flex container)和弹性子元素(Flex item)组成。</p>

<p>​	弹性容器通过设置 display 属性的值为 flex 或 inline-flex将其定义为弹性容器。</p>

<p>​	弹性容器内包含了一个或多个弹性子元素。</p>

<p>==<strong>注意</strong>==：弹性容器外及弹性子元素内是正常渲染的。弹性盒子只定义了弹性子元素如何在弹	性容器内布局。</p>

<p>​	弹性子元素通常在弹性盒子内==一行==显示。默认情况==每个容器只有一行==。</p>

<p>​	以下元素展示了弹性子元素在一行内显示，从左到右:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
<span class="nt">&lt;style&gt;</span>
<span class="nc">.flex-container</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">-webkit-flex</span><span class="p">;</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">400px</span><span class="p">;</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">250px</span><span class="p">;</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="no">lightgrey</span><span class="p">;</span>
<span class="p">}</span>
 
<span class="nc">.flex-item</span> <span class="p">{</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="no">cornflowerblue</span><span class="p">;</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
    <span class="nl">margin</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
 
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex-container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex-item"</span><span class="nt">&gt;</span>flex item 1<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex-item"</span><span class="nt">&gt;</span>flex item 2<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"flex-item"</span><span class="nt">&gt;</span>flex item 3<span class="nt">&lt;/div&gt;</span> 
<span class="nt">&lt;/div&gt;</span>
 
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<h3 id="弹性盒子常用属性">弹性盒子常用属性</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: left">属性</th>
      <th style="text-align: left">描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><a href="https://www.runoob.com/cssref/pr-class-display.html">display</a></td>
      <td style="text-align: left">指定 HTML 元素盒子类型。</td>
    </tr>
    <tr>
      <td style="text-align: left"><a href="https://www.runoob.com/cssref/css3-pr-flex-direction.html">flex-direction</a></td>
      <td style="text-align: left">指定了弹性容器中子元素的排列方式</td>
    </tr>
    <tr>
      <td style="text-align: left"><a href="https://www.runoob.com/cssref/css3-pr-justify-content.html">justify-content</a></td>
      <td style="text-align: left">设置弹性盒子元素在主轴（横轴）方向上的对齐方式。</td>
    </tr>
    <tr>
      <td style="text-align: left"><a href="https://www.runoob.com/cssref/css3-pr-align-items.html">align-items</a></td>
      <td style="text-align: left">设置弹性盒子元素在侧轴（纵轴）方向上的对齐方式。</td>
    </tr>
    <tr>
      <td style="text-align: left"><a href="https://www.runoob.com/cssref/css3-pr-flex-wrap.html">flex-wrap</a></td>
      <td style="text-align: left">设置弹性盒子的子元素超出父容器时是否换行。</td>
    </tr>
    <tr>
      <td style="text-align: left"><a href="https://www.runoob.com/cssref/css3-pr-align-content.html">align-content</a></td>
      <td style="text-align: left">修改 flex-wrap 属性的行为，类似 align-items, 但不是设置子元素对齐，而是设置行对齐</td>
    </tr>
    <tr>
      <td style="text-align: left"><a href="https://www.runoob.com/cssref/css3-pr-flex-flow.html">flex-flow</a></td>
      <td style="text-align: left">flex-direction 和 flex-wrap 的简写</td>
    </tr>
    <tr>
      <td style="text-align: left"><a href="https://www.runoob.com/cssref/css3-pr-order.html">order</a></td>
      <td style="text-align: left">设置弹性盒子的子元素排列顺序。</td>
    </tr>
    <tr>
      <td style="text-align: left"><a href="https://www.runoob.com/cssref/css3-pr-align-self.html">align-self</a></td>
      <td style="text-align: left">在弹性子元素上使用。覆盖容器的 align-items 属性。</td>
    </tr>
    <tr>
      <td style="text-align: left"><a href="https://www.runoob.com/cssref/css3-pr-flex.html">flex</a></td>
      <td style="text-align: left">设置弹性盒子的子元素如何分配空间。</td>
    </tr>
  </tbody>
</table>

<h4 id="弹性盒子的浏览器支持">弹性盒子的浏览器支持</h4>

<p>​	-webkit- 和 -moz- 为指定浏览器的前缀</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">属性</th>
      <th>Chrome</th>
      <th>Edge</th>
      <th>Fire Fox</th>
      <th>Safari</th>
      <th>Opera</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Basic support (single-line flexbox)</td>
      <td>29.0 21.0 -webkit-</td>
      <td>11.0</td>
      <td>22.0 18.0 -moz-</td>
      <td>6.1 -webkit-</td>
      <td>12.1 -webkit-</td>
    </tr>
    <tr>
      <td style="text-align: left">Multi-line flexbox</td>
      <td>29.0 21.0 -webkit-</td>
      <td>11.0</td>
      <td>28.0</td>
      <td>6.1 -webkit-</td>
      <td>17.0 15.0 -webkit- 12.1</td>
    </tr>
  </tbody>
</table>

<h4 id="flex-direction-位置">flex-direction 位置</h4>

<table>
  <tbody>
    <tr>
      <td>​	指定弹性子元素在父容器中的位置,横向</td>
      <td>反序</td>
      <td>纵向</td>
      <td>反序,一般用于父级元素</td>
    </tr>
  </tbody>
</table>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">flex-direction</span><span class="nd">:row</span><span class="o">|</span><span class="nt">roe-reverse</span><span class="o">|</span><span class="nt">column</span><span class="o">|</span><span class="nt">column-reverse</span>
</code></pre></div></div>

<p>​	<a href="https://www.runoob.com/try/try.php?filename=trycss3_flexbox_direction_row-reverse">示例1 : 横向反序</a></p>

<p>​	<a href="https://www.runoob.com/try/try.php?filename=trycss3_flexbox_direction_column-reverse">示例2 : 纵向反序</a></p>

<h4 id="justify-content-主轴线对齐">justify-content 主轴线对齐</h4>

<p>​	内容对齐,把弹性项沿着弹性容器的==主轴线==对齐</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">justify-content</span><span class="nd">:flex-start</span><span class="o">|</span><span class="nt">flex-end</span><span class="o">|</span><span class="nt">center</span><span class="o">|</span><span class="nt">space-between</span><span class="o">|</span><span class="nt">space-around</span>
</code></pre></div></div>

<p>效果图展示：</p>

<p><img src="https://www.runoob.com/wp-content/uploads/2016/04/2259AD60-BD56-4865-8E35-472CEABF88B2.jpg" alt="img" /></p>

<p><a href="https://www.runoob.com/try/try.php?filename=trycss3_flexbox_justify_flex-end">示例1:flex-end</a></p>

<p><a href="https://www.runoob.com/try/try.php?filename=trycss3_flexbox_justify_center">示例2 : center</a></p>

<p><a href="">示例3 : space-between</a></p>

<p><a href="https://www.runoob.com/try/try.php?filename=trycss3_flexbox_justify_space-around">示例4 : space-around</a></p>

<h4 id="align-items-纵轴对齐">align-items 纵轴对齐</h4>

<p>​	align-items 设置或检索弹性盒子元素在==侧轴(纵轴)==方向的对齐方式,弹性子元素的宽度会随着条件自适应变化,但是最大值为盒子大小,最小值为子元素中最长单词的长度</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">align-items</span><span class="nd">:flex-start</span><span class="o">|</span><span class="nt">flex-end</span><span class="o">|</span><span class="nt">center</span><span class="o">|</span><span class="nt">baseline</span><span class="o">|</span><span class="nt">stretch</span>
</code></pre></div></div>

<ul>
  <li>
    <p>flex-start：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的==侧轴起始==边界。</p>
  </li>
  <li>
    <p>flex-end：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的==侧轴结束==边。</p>
  </li>
  <li>
    <p>center：弹性盒子元素在该行的侧轴（纵轴）上==居中放置==。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。</p>
  </li>
  <li>
    <p>baseline：如弹性盒子元素的行内轴与侧轴为同一条，则该值与’flex-start’等效。其它情况下，该值将参与基线对齐。</p>
  </li>
  <li>
    <p>stretch：如果指定侧轴大小的属性值为’auto’，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照’min/max-width/height’属性的限制。</p>

    <p><a href="https://www.runoob.com/try/try.php?filename=trycss3_flexbox_align_flex-start">示例</a></p>

    <p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">参考文档</a></p>
  </li>
</ul>

<h4 id="flex-wrap-换行方式">flex-wrap 换行方式</h4>

<table>
  <tbody>
    <tr>
      <td>​	不换行</td>
      <td>换行</td>
      <td>将溢出的放在第一行</td>
    </tr>
  </tbody>
</table>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">flex-wrap</span><span class="nd">:nowrap</span><span class="o">|</span><span class="nt">wrap</span><span class="o">|</span><span class="nt">wrap-reverse</span>
</code></pre></div></div>

<h4 id="align-content-行对齐">align-content 行对齐</h4>

<p>​	设置弹性子元素==行==的对齐方式</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">align-content</span><span class="nd">:flex-start</span><span class="o">|</span><span class="nt">flex-end</span><span class="o">|</span><span class="nt">center</span><span class="o">|</span><span class="nt">space-between</span><span class="o">|</span><span class="nt">space-around</span><span class="o">|</span><span class="nt">stretch</span>
</code></pre></div></div>

<ul>
  <li>
    <p><code class="highlighter-rouge">stretch</code> - 默认。各行将会伸展以占用剩余的空间。</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">flex-start</code> - 各行向弹性盒容器的起始位置堆叠。</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">flex-end</code> - 各行向弹性盒容器的结束位置堆叠。</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">center</code> -各行向弹性盒容器的中间位置堆叠。</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">space-between</code> -各行在弹性盒容器中平均分布。</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">space-around</code> - 各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的一半。</p>

    <p><a href="https://www.runoob.com/try/try.php?filename=trycss3_flexbox_align-content">align-content 示例</a></p>
  </li>
</ul>

<h3 id="弹性子元素属性">弹性子元素属性</h3>

<h4 id="排序">排序</h4>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">order</span><span class="o">:&lt;</span><span class="nt">integer</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>​	integer : 用整数值定义排列顺序,数值晓得在前面,可以为负值,默认为0</p>

<p>​	<a href="https://www.runoob.com/try/try.php?filename=trycss3_flexbox_order">示例:order排序</a></p>

<h4 id="对齐">对齐</h4>

<p>​	设置”margin”值为”auto”值，自动获取弹性容器中剩余的空间。所以设置垂直方向margin值为”auto”，可以使弹性子元素在弹性容器的两上轴方向都完全居中。</p>

<p>​	弹性子元素上设置 <code class="highlighter-rouge">margin-right: auto;</code> ,它将剩余的空间放置在元素的右侧：</p>

<p>​	<a href="https://www.runoob.com/try/try.php?filename=trycss3_flexbox_margin">示例 : margin的使用</a></p>

<h4 id="align-self-垂直对齐">align-self 垂直对齐</h4>

<p>​	`	align-self` 属性用于设置弹性元素自身在侧轴（纵轴）方向上的对齐方式。</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">align-self</span><span class="o">:</span> <span class="nt">auto</span> <span class="o">|</span> <span class="nt">flex-start</span> <span class="o">|</span> <span class="nt">flex-end</span> <span class="o">|</span> <span class="nt">center</span> <span class="o">|</span> <span class="nt">baseline</span> <span class="o">|</span> <span class="nt">stretch</span>	
</code></pre></div></div>

<ul>
  <li>
    <p>auto：如果’align-self’的值为’auto’，则其计算值为元素的父元素的’align-items’值，如果其没有父元素，则计算值为’stretch’。</p>
  </li>
  <li>
    <p>flex-start：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。</p>
  </li>
  <li>
    <p>flex-end：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。</p>
  </li>
  <li>
    <p>center：弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。</p>
  </li>
  <li>
    <p>baseline：如弹性盒子元素的行内轴与侧轴为同一条，则该值与’flex-start’等效。其它情况下，该值将参与基线对齐。</p>
  </li>
  <li>
    <p>stretch：如果指定侧轴大小的属性值为’auto’，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照’min/max-width/height’属性的限制。</p>

    <p><a href="https://www.runoob.com/try/try.php?filename=trycss3_flexbox_align-self">align-self 示例</a></p>
  </li>
</ul>

<h4 id="flex-分配空间">flex 分配空间</h4>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">flex</span><span class="o">:</span> <span class="nt">auto</span> <span class="o">|</span> <span class="nt">initial</span> <span class="o">|</span> <span class="nt">none</span> <span class="o">|</span> <span class="nt">inherit</span> <span class="o">|</span>  <span class="o">[</span> <span class="nt">flex-grow</span> <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> <span class="nt">flex-shrink</span> <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> <span class="nt">flex-basis</span> <span class="o">]</span>
</code></pre></div></div>

<ul>
  <li>
    <p>auto: 计算值为 1 1 auto</p>
  </li>
  <li>
    <p>initial: 计算值为 0 1 auto</p>
  </li>
  <li>
    <p>none：计算值为 0 0 auto</p>
  </li>
  <li>
    <p>inherit：从父元素继承</p>
  </li>
  <li>
    <p>[ flex-grow ]：定义弹性盒子元素的扩展比率。</p>
  </li>
  <li>
    <p>[ flex-shrink ]：定义弹性盒子元素的收缩比率。</p>
  </li>
  <li>
    <p>[ flex-basis ]：定义弹性盒子元素的默认基准值。</p>

    <p><a href="https://www.runoob.com/try/try.php?filename=trycss3_flexbox_flex_number">示例</a></p>
  </li>
</ul>
:ET